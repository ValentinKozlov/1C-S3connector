
 
//++Frog 01.03.2022
&Вместо("ОбработкаПроверкиЗаполнения")
Процедура sd_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ПрофилиБезопасности") Тогда
		
		МодульРаботаВБезопасномРежиме   = ОбщегоНазначения.ОбщийМодуль("РаботаВБезопасномРежиме");
		ИспользуютсяПрофилиБезопасности = МодульРаботаВБезопасномРежиме.ИспользуютсяПрофилиБезопасности();
		
	Иначе
		ИспользуютсяПрофилиБезопасности = Ложь;
	КонецЕсли;
	
	
	Если ЗначениеЗаполнено(sd_МестоХраненияФайлов) = Ложь Тогда 
	 	ТекстОшибки = НСтр("ru = 'Не заполнено место хранения файлов'");
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "sd_МестоХраненияФайлов", "Объект", Отказ);			
		Возврат;
	КонецЕсли;         	
	
	Если Не ДополнительныеСвойства.Свойство("ПропуститьОсновнуюПроверкуЗаполнения") Тогда
	
		Если Не НомерПорядкаУникален(ПорядокЗаполнения, Ссылка) Тогда
			ТекстОшибки = НСтр("ru = 'Порядок заполнения не уникален - в системе уже есть том с таким порядком'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПорядокЗаполнения", "Объект", Отказ);
		КонецЕсли;
		
		Если МаксимальныйРазмер <> 0 Тогда
			ТекущийРазмерВБайтах = 0;
			Если Не Ссылка.Пустая() Тогда
				ТекущийРазмерВБайтах = РаботаСФайламиВТомахСлужебный.ОбъемТома(Ссылка);
			КонецЕсли;
			ТекущийРазмер = ТекущийРазмерВБайтах / (1024 * 1024);
			
			Если МаксимальныйРазмер < ТекущийРазмер Тогда
				ТекстОшибки = НСтр("ru = 'Максимальный размер тома меньше, чем текущий размер'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "МаксимальныйРазмер", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;		
		
		Если sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ЛокальноеХранилище Тогда
			Если ПустаяСтрока(ПолныйПутьWindows) И ПустаяСтрока(ПолныйПутьLinux) Тогда
				ТекстОшибки = НСтр("ru = 'Не заполнен полный путь'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПолныйПутьWindows", "Объект", Отказ);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПолныйПутьLinux",   "Объект", Отказ);
				Возврат;
			КонецЕсли;
			
			ПутиКТомам = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПолныйПутьLinux, ПолныйПутьWindows");
			ПроверятьУникальностьПутей = ПутиКТомам.ПолныйПутьLinux <> ПолныйПутьLinux 
											ИЛИ ПутиКТомам.ПолныйПутьWindows <> ПолныйПутьWindows;
			Если ПроверятьУникальностьПутей Тогда
				ПроверитьУникальностьПутиКТомам(Отказ); 
			КонецЕсли;
			
			Если Не ИспользуютсяПрофилиБезопасности
			   И Не ПустаяСтрока(ПолныйПутьWindows)
			   И (    Лев(ПолныйПутьWindows, 2) <> "\\"
			      ИЛИ СтрНайти(ПолныйПутьWindows, ":") <> 0 ) Тогда
				
				ТекстОшибки = НСтр("ru = 'Путь к тому должен быть в формате UNC (\\servername\resource).'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "ПолныйПутьWindows", "Объект", Отказ);
				Возврат;
			КонецЕсли; 
			
		ИначеЕсли sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ХранилищеS3Minio Тогда
			Если ЗначениеЗаполнено(sd_ВнешнийИсточникХраненияФайлов) = Ложь Тогда 
				ТекстОшибки = НСтр("ru = 'Не выбран внешний источник хранения файлов'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "sd_ВнешнийИсточникХраненияФайлов", "Объект", Отказ);			
				Возврат;
			КонецЕсли;
			// Нужно сделать алгоритм проверки корректности выбранных настроек.
			//Например, можно подключиться к MinIO. Если подключения нет, то недавать сохранять
		Иначе     
			ТекстОшибки = НСтр("ru = 'Выбранное значение места хранения файлов не описано в алгоритме'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, , "sd_МестоХраненияФайлов", "Объект", Отказ);			
			Возврат;
		КонецЕсли;		
	КонецЕсли;
		
	Если sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ЛокальноеХранилище Тогда
		Если Не ДополнительныеСвойства.Свойство("ПропуститьПроверкуДоступаКПапке") Тогда
			
			ИмяПоляСПолнымПутем = ?(ОбщегоНазначения.ЭтоWindowsСервер(), "ПолныйПутьWindows", "ПолныйПутьLinux");
			Если ОбщегоНазначения.РазделениеВключено() Тогда
				МодульРаботаВМоделиСервиса = ОбщегоНазначения.ОбщийМодуль("РаботаВМоделиСервиса");
				ЗначениеРазделителя = ?(МодульРаботаВМоделиСервиса.ИспользованиеРазделителяСеанса(),
					МодульРаботаВМоделиСервиса.ЗначениеРазделителяСеанса(), "");
			Иначе
				ЗначениеРазделителя = "";
			КонецЕсли;
			
			ПолныйПутьТома = СтрЗаменить(ЭтотОбъект[ИмяПоляСПолнымПутем], "%z", ЗначениеРазделителя);
			ИмяКаталогаТестовое = ПолныйПутьТома + "ПроверкаДоступа" + ПолучитьРазделительПути();
			
			Попытка
				СоздатьКаталог(ИмяКаталогаТестовое);
				УдалитьФайлы(ИмяКаталогаТестовое);
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				Если ИспользуютсяПрофилиБезопасности Тогда
					ШаблонОшибки =
						НСтр("ru = 'Некорректный путь к тому или сервер с томом в данный момент недоступен.
						           |Проверьте корректность пути к общей папке и доступность сервера.
						           |Возможно не настроены разрешения в профилях безопасности,
						           |или учетная запись, от лица которой работает
						           |сервер 1С:Предприятия, не имеет прав доступа к каталогу тома.
						           |
						           |%1'");
				Иначе
					ШаблонОшибки =
						НСтр("ru = 'Некорректный путь к тому или сервер с томом в данный момент недоступен.
						           |Проверьте корректность пути к общей папке и доступность сервера.
						           |Возможно учетная запись, от лица которой работает
						           |сервер 1С:Предприятия, не имеет прав доступа к каталогу тома.
						           |
						           |%1'");
				КонецЕсли;
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки, , ИмяПоляСПолнымПутем, "Объект", Отказ);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры   

//--Frog 01.03.2022