// Работа с файлами в S3 MinIO
//
// Copyright 2022 Valentin Kozlov (Frog)
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

// URL: https://github.com/ValentinKozlov/
// e-mail: i_frog@mail.ru
// Версия: 0.0.1
// Требования: Версия БСП 3.1.6.118 и выше (на других не тестировалось)


#Область ОсновныхВидимыхПроцедурыИФункции

//Функция формирует структуру параметров для сохранения файла в Minio
Функция ПараметрыMinio() Экспорт
	
	ПараметрыMinio = Новый Структура;	
	
	//Все настройки по подключению к Minio хранятся в справочнике sd_ВнешниеИнформационныеСистемы
	ПараметрыMinio.Вставить("НастройкиMinio", Справочники.sd_ВнешниеИнформационныеСистемы.ПустаяСсылка());
	
	//Здесь у нас сам файл (бинарь), который нужно сохранить или который возвращается при чтении
	ПараметрыMinio.Вставить("ДвоичныеДанные", Неопределено); 
	
	// Cюда передаем путь сформированный подсистемой "Работа с файлами"
	//на основании этого пути будет сформирована вложенность папок в Minio, а также
	//здесь будем хранить ссылку на файл в Minio после сохранения
	ПараметрыMinio.Вставить("ПутьКФайлу", "");  
	
	//Нужно использовать для оптимизации в случае пакетной обработки файлов
	ПараметрыMinio.Вставить("Сессия", Неопределено); 
	
	//Нужно чтобы правильно получить MIME тип 
	ПараметрыMinio.Вставить("Расширение", ""); 
	
	//Нужно чтобы правильно получить MIME тип 
	ПараметрыMinio.Вставить("Приложение", "1cbit");
	
	//По умолчанию Таймаут делаем 30 сек
	ПараметрыMinio.Вставить("Таймаут", 20);
	
	ПараметрыMinio.Вставить("РаботаВДиалоге", Истина);
	
	Возврат ПараметрыMinio;
КонецФункции


//Процедура cохраняет файл в Minio по переданным параметрам. Основной вызов происходит из подсистемы "РаботаСФайлами",
//но можно использовать самостоятельно заполнив параметры из функции ПараметрыMinio()
Процедура СохранитьФайлВMinio(ПараметрыMinio) Экспорт
	
	РаботаВДиалоге = ПараметрыMinio.РаботаВДиалоге;
	ДвоичныеДанные = ПараметрыMinio.ДвоичныеДанные;		
	
	ПутьКФайлу = ПараметрыMinio.ПутьКФайлу;
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);	
	
	Путь = СтруктураИмениФайла.Путь; 
	ИмяФайла = СтруктураИмениФайла.Имя;	
	ПараметрыMinio.Расширение = СтруктураИмениФайла.Расширение;
	
	//Преобразуем путь в нужный для передачи формат. Часть символов нельзя передать по HTTP, поэтому кодируем все в unicode.
	//Для начала, в пути заменяем символ "\" на ".", так как точка в unicode не меняется (я сделал предположение что в пути не может быть точек).	
	Путь = СтрЗаменить(Путь,"\",".");
	Путь = КодироватьСтроку(Путь, СпособКодированияСтроки.КодировкаURL);
	//Заменяем "." на "/" для корректного формирования URL
	Путь = СтрЗаменить(Путь,".","/"); 
	//Описание зачем плюсуем время в заголовке общего модуля предварительно переводя в unicode	
	ДинамическаяЧастьПути = КодироватьСтроку(Формат(ТекущаяДата(), "ДЛФ=T"), СпособКодированияСтроки.КодировкаURL); 
	Путь = Путь +ДинамическаяЧастьПути+"/";  
	
	//Преобразуем имя файла
	//Если понадобится, то можно и латиницей сделать имя файл
	//ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(СтруктураИмениФайла.Имя);       

	ИмяФайлаUnicode = КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.КодировкаURL);		
	
	Сессия = ПараметрыMinio.Сессия;
	
	ПараметрыHTTPЗапроса = СформироватьПараметрыHTTPЗапроса(ПараметрыMinio);	
	НастройкиMinio = ПараметрыMinio.НастройкиMinio;	
	АдресСервиса = НастройкиMinio.АдресСервиса;
	ИмяБакета = НастройкиMinio.ИмяБакета;	

	URL = АдресСервиса + ИмяБакета + Путь + ИмяФайлаUnicode;	
	Ответ = sd_HTTPConnector.Put(URL, ДвоичныеДанные, ПараметрыHTTPЗапроса, Сессия);
	
	Если Ответ.КодСостояния = 200 Тогда
		//Сохраняем путь к файлу. Поэтому пути потом можно будет получить файл из Minio
		ПараметрыMinio.ПутьКФайлу = URL;      
		Если РаботаВДиалоге Тогда 
			СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Файл ""%1"" в MinIO записан корректно'"), ИмяФайла);

			ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='При записи файла ""%1"" в MinIO произошла ошибка: ""%2"" '"), ИмяФайла, Строка(Ответ.КодСостояния));
		
		ВызватьИсключение(СообщениеОбОшибке);
	КонецЕсли;                      
	
КонецПроцедуры


//Процедура получает файл из Minio по переданным параметрам. Основной вызов происходит из подсистемы "РаботаСФайлами",
//но можно использовать самостоятельно заполнив параметры из функции ПараметрыMinio()

Процедура ПолучитьФайлИзMinio(ПараметрыMinio) Экспорт
	
	ПутьКФайлуUnicode = ПараметрыMinio.ПутьКФайлу;
	ПутьКФайлу = РаскодироватьСтроку(ПутьКФайлуUnicode, СпособКодированияСтроки.КодировкаURL);
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);				
	ИмяФайла = СтруктураИмениФайла.Имя;	
	
	ПараметрыHTTPЗапроса = СформироватьПараметрыHTTPЗапроса(ПараметрыMinio);	
	Ответ = sd_HTTPConnector.Get(ПутьКФайлуUnicode,, ПараметрыHTTPЗапроса);
	Если Ответ.КодСостояния = 200 Тогда  
		
		ДвоичныеДанныеФайла = Ответ.Тело;
		Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Полученый файл %1 из MinIO не имеет двоичных данных: ""%2"" '"), ИмяФайла, Строка(Ответ.КодСостояния));
            		
			ВызватьИсключение(СообщениеОбОшибке);
		КонецЕсли;
		//Возвращаем двоичные данные
		ПараметрыMinio.ДвоичныеДанные = ДвоичныеДанныеФайла;				

	Иначе  	
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='При получении файла %1 из MinIO произошла ошибка: ""%2"" '"), ИмяФайла, Строка(Ответ.КодСостояния));

		ВызватьИсключение(СообщениеОбОшибке);
    КонецЕсли;			
	
КонецПроцедуры

 
Процедура УдалитьФайлВMinio(ПараметрыMinio) Экспорт
	
	РаботаВДиалоге = ПараметрыMinio.РаботаВДиалоге;
	
	ПутьКФайлуUnicode = ПараметрыMinio.ПутьКФайлу;
	ПутьКФайлу = РаскодироватьСтроку(ПутьКФайлуUnicode, СпособКодированияСтроки.КодировкаURL);	
	СтруктураИмениФайла = ПолучитьСтруктуруФайлаИзURL(ПутьКФайлу);
	
	ИмяФайла = СтруктураИмениФайла.Имя;	
	
	ПараметрыHTTPЗапроса = СформироватьПараметрыHTTPЗапроса(ПараметрыMinio);
	Ответ = sd_HTTPConnector.Delete(ПутьКФайлуUnicode,, ПараметрыHTTPЗапроса);
	Если Ответ.КодСостояния = 204 Тогда	
		Если РаботаВДиалоге Тогда			
			
			СообщениеПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Файл ""%1"" в MinIO удален корректно'"), ИмяФайла);
			
   			ОбщегоНазначения.СообщитьПользователю(СообщениеПользователю);
		КонецЕсли;
	Иначе
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='При удалении файла %1 из MinIO произошла ошибка: ""%2"" '"), ИмяФайла, Строка(Ответ.КодСостояния));
        	
		ВызватьИсключение(СообщениеОбОшибке);
    КонецЕсли;		

КонецПроцедуры


#КонецОбласти 


#Область СлужебныеПроцедурыИФункции


Функция ПолучитьПараметрыАутентификацииMinIo(НастройкиMinio)	
	
	ПараметрыАутентификацииMinIo = Новый Структура;
	ПараметрыАутентификацииMinIo.Вставить("Тип", "AWS4-HMAC-SHA256");
	ПараметрыАутентификацииMinIo.Вставить("ИдентификаторКлючаДоступа", НастройкиMinio.Логин);
	ПараметрыАутентификацииMinIo.Вставить("СекретныйКлюч", НастройкиMinio.Пароль);
	ПараметрыАутентификацииMinIo.Вставить("Регион", НастройкиMinio.ИмяСервера);
	ПараметрыАутентификацииMinIo.Вставить("Сервис", "s3");
  	
	Возврат ПараметрыАутентификацииMinIo;
	
КонецФункции 


Функция ПолучитьHTTPЗаголовкиMinIo(ПараметрыMinio)
	
	//Нужно сделать заголовок Content-Type в соответствии с реальным типом файла
	HTTPЗаголовкиMinIo = Новый Соответствие;
	HTTPЗаголовкиMinIo.Вставить("Content-Type", ПолучитьMIMEТипПоРасширению(ПараметрыMinio.Расширение));
	HTTPЗаголовкиMinIo.Вставить("x-amz-meta-author", ПараметрыMinio.Приложение);
	HTTPЗаголовкиMinIo.Вставить("Expect", "100-continue"); 
	
	Возврат HTTPЗаголовкиMinIo;
	
КонецФункции 


Функция СформироватьПараметрыHTTPЗапроса(ПараметрыMinio) Экспорт		
	
	HTTPЗаголовкиMinIo = ПолучитьHTTPЗаголовкиMinIo(ПараметрыMinio);
	
	НастройкиMinio = ПараметрыMinio.НастройкиMinio;	
	ПараметрыАутентификацииMinIo = ПолучитьПараметрыАутентификацииMinIo(НастройкиMinio);	
	
	ПараметрыHTTPЗапроса = Новый Структура;
	ПараметрыHTTPЗапроса.Вставить("Заголовки", HTTPЗаголовкиMinIo);
	ПараметрыHTTPЗапроса.Вставить("Аутентификация", ПараметрыАутентификацииMinIo);
	ПараметрыHTTPЗапроса.Вставить("Таймаут", ПараметрыMinio.Таймаут);
	
	//С этим параметром нужно разобраться
	//ПараметрыHTTPЗапроса.Вставить("МаксимальноеКоличествоПовторов", 8);
	
	Возврат ПараметрыHTTPЗапроса

КонецФункции


//Получаем MIME тип по переданному расширению

//Расширение нужно передавать с точкой, так как функция:
//ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу) получает данные с точкой
Функция ПолучитьMIMEТипПоРасширению(Расширение)
	Если ПустаяСтрока(Расширение) Тогда 
		MIMEТип = "application/octet-stream";
	Иначе
		СоответствиеMIMEТипов = ПолучитьСоответствиеMIMEТипов();		
		MIMEТип = СоответствиеMIMEТипов.Получить(Расширение);		
		
		Если ПустаяСтрока(MIMEТип) Тогда 
			MIMEТип = "application/octet-stream";
		КонецЕсли;
	КонецЕсли;	
	
	Возврат MIMEТип;	
КонецФункции        

//Формируем таблицу MIME типов                                                         

//Данные для типов взял отсюда:
//https://developer.mozilla.org/ru/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
Функция ПолучитьСоответствиеMIMEТипов()
	                                  
	MIMEТип = Новый Соответствие;
	//Форматы документов
	MIMEТип.Вставить(".doc", "application/msword");
	MIMEТип.Вставить(".docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	MIMEТип.Вставить(".pdf", "application/pdf"); 	
	MIMEТип.Вставить(".ppt", "application/vnd.ms-powerpoint"); 
	MIMEТип.Вставить(".pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"); 	
	MIMEТип.Вставить(".rtf", "application/rtf"); 
	MIMEТип.Вставить(".vsd", "application/vnd.visio"); 	
	MIMEТип.Вставить(".xls", "application/vnd.ms-excel"); 
	MIMEТип.Вставить(".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"); 
    MIMEТип.Вставить(".txt", "text/plain"); 
	
	//Архиваторы
	MIMEТип.Вставить(".rar", "application/vnd.rar");   	
	MIMEТип.Вставить(".zip", "application/zip");       
	
	//Картинки
    MIMEТип.Вставить(".bmp", "image/bmp"); 	
	MIMEТип.Вставить(".gif", "image/gif");
	MIMEТип.Вставить(".jpeg", "image/jpeg"); 
	MIMEТип.Вставить(".jpg", "image/jpeg"); 
	
	//Видео
	MIMEТип.Вставить(".avi", "video/x-msvideo"); 
	MIMEТип.Вставить(".mpeg", "video/mpeg");     
	
	//Аудио
	MIMEТип.Вставить(".mp3", "audio/mpeg"); 
	
	//Разное	
	MIMEТип.Вставить(".css", "text/css"); 		
	MIMEТип.Вставить(".csh", "application/x-csh"); 
	MIMEТип.Вставить(".csv", "text/csv"); 		
	MIMEТип.Вставить(".htm", "text/html"); 
	MIMEТип.Вставить(".html", "text/html"); 
	MIMEТип.Вставить(".ico", "image/vnd.microsoft.icon");
	
	Возврат MIMEТип; 
КонецФункции


Функция ПолучитьСтруктуруФайлаИзURL(Знач URL)
	
	СтруктураИмениФайла = Новый Структура("ПолноеИмя,Путь,Имя,Расширение,ИмяБезРасширения");	
	
	// Если полное имя файла оказалось пустым, то остальные параметры структуры возвращаем пустыми.
	Если СтрДлина(URL) = 0 Тогда 
		СтруктураИмениФайла.Вставить("Путь", ""); 
		СтруктураИмениФайла.Вставить("Имя", ""); 
		СтруктураИмениФайла.Вставить("Расширение", ""); 
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", ""); 
		Возврат СтруктураИмениФайла;
	КонецЕсли;
	
	// Выделяем путь к файлу и имя файла.
	Если СтрНайти(URL, "/") > 0 Тогда
		ПозицияРазделителя = СтрНайти(URL, "/", НаправлениеПоиска.СКонца);
	Иначе
		ПозицияРазделителя = 0;
	КонецЕсли;
	СтруктураИмениФайла.Вставить("Путь", Лев(URL, ПозицияРазделителя)); 
	СтруктураИмениФайла.Вставить("Имя", Сред(URL, ПозицияРазделителя + 1));
	

	ПозицияТочки = СтрНайти(СтруктураИмениФайла.Имя, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки = 0 Тогда
		СтруктураИмениФайла.Вставить("Расширение", "");
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", СтруктураИмениФайла.Имя);
	Иначе
		СтруктураИмениФайла.Вставить("Расширение", Сред(СтруктураИмениФайла.Имя, ПозицияТочки));
		СтруктураИмениФайла.Вставить("ИмяБезРасширения", Лев(СтруктураИмениФайла.Имя, ПозицияТочки - 1));
	КонецЕсли;
	
	Возврат СтруктураИмениФайла;
	
КонецФункции


#КонецОбласти 

