// Работа с файлами в S3 MinIO
//
// Copyright 2022 Valentin Kozlov (Frog)
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//

// URL: https://github.com/ValentinKozlov/
// e-mail: i_frog@mail.ru
// Версия: 0.0.1
// Требования: Версия БСП 3.1.6.118 и выше (на других не тестировалось)

#Область Описание
//Возможно неочевидные нюансы разработки и основная идея (описание для тех, кто хочет погрузиться глубже):

//Модуль разрабатывался в первую очередь для интеграции с подсистемой БСП "Работа с файлами", но его можно также использовать
//полностью самостоятельно. Для этого сформируйте и заполните параметры Функция ПараметрыMinio() и дальше используйте как хотите.
//Примеры использованя можно посмотреть в расширении "Connector minio" в общем модуле "РаботаСФайламиВТомахСлужебный".


//Работа с файлами в подсисистеме БСП "Работа с файлами" разбита на несколько слоёв, поэтому основная идея была привязаться к самому нижнему слою,
//чтобы минимизировать количество вносимых изменений внося изменения только в тех местах где происходит конечная обработка логики. С одной стороны это
//увеличивает порог вхождения на доработку алгоритма, так как требуется погрузиться в типовой алгоритм работы подсистемы "Работа с файлами",
//с другой стороны, позволяет очень легко интегрировать решение в свои наработки особо не разбираясь, а также легко обновляться на новые версии БСП.

//После анализа стало понятно, что лучше всего привязаться к типовому алгоритму сохранения файлов в локальном хранилище.
//По факту, я пытаюсь на нижнем слое работать только с теми параметрами, которые дает мне вендор и в зависмости от настроек Тома формирую дополнительную логику.
//Для этого в Том был добавлен параметр sd_МестоХраненияФайлов. Параметр определяет в каком хранилище храняться файлы
//(локально или в Minio). Если в Minio, то идет своя обработка данных. На момент написание этого комментария, удалось реализовать
//весь основной функционал (добавление файла через кнопку добавить и скрепку, перетаскивание файла,
//сохранение новой версии файла, удаление файла) переопределив только 4 процедуры из общего модуля "РаботаСФайламиВТомахСлужебный":
//ЗаписатьДанныеФайлаВТом, ДанныеФайла, УдалитьФайл, ПолноеИмяФайлаВТоме  

//Краткая логика работы с подсистемой "Работа с файлами"

//Указанная версия БСП при хранении файлов в локальных томах умеет:
// 1. Сохранять файлы в разбивке по дням. Т.е. если я возьму один и тот же файл и сохраню его сегодня и завтра, то храниться он будет в разных каталогах с именем "дата"
// 2. Сохранять один и тот же файл за один и тот же день в разных каталогах. Обеспечивается это за счет функции Общий модуль РаботаСФайламиСлужебныйКлиентСервер.Функция ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла)
//в функции есть абсолютно дурацкая проверка на существование каталога. Пофакту алгоритм выбирает одну из 26 букАв и перебором проверяет есть ли такой каталог
//если каталог есть, то цикл повторяется.
// 3. В зависимости от флажка "Создавать подкаталоги с именами справочников-владельцев файлов" в "Администрирование" - > "Настройка работы с файлами" 
//к пути может еще прибавляться имя справочника владельца файла

//По второму пункту я решил не заморачиваться и вместо буКавки просто прибавляю время к текущему каталогу (Процедура СохранитьФайлВMinio(ПараметрыMinio)).

//Краткая инструкция по подключению модуля "Работа с файлами" БСП к новому справочнику:

//1. Создаем справочник в основной конфигурации (текущая версия БСП с установленным режимом совместимости не позволила сделать нормальное решение полностью на расширении)
//2. Есть 2 возможности хранения файлов для справочника 1С:
//   - в типовом справочнике БСП "Файлы" – я пока разобрался только с этим вариантом
//   - в специально созданном справочнике с названием <Имя справочника>ПрисоединенныеФайлы – с этим вариантом пока не разбирался, поэтому возможно что моя доработка  с ним не работает.
//3. Если мы хотим подключить типовой справочник БСП "Файлы" нужно в определяемые типы "ВладелецФайлов" добавить новый справочник.
//4. Для того чтобы файл записывался нормально, его нужно записать в регистр "НаличиеФайлов", а это можно сделать, добавив новый справочник в определяемые типы "ВладелецПрисоединенныхФайлов"
//5. Для того чтобы при копировании, копировались и присоединенные файлы, нужно в форме элемента добавить Параметр "ЗначениеКопирования", тип: ссылка на этот же справочник.
//6. В модуль формы справочника нужно добавить несколько процедур для того, чтобы отработал механизм работы с файлами. Для примера я перенес в расширение справочник «Сотрудники».

#КонецОбласти


#Область ОсновныхВидимыхПроцедурыИФункции

//Функция формирует структуру параметров для сохранения файла в Minio
Функция ПараметрыMinio() Экспорт
	
	ПараметрыMinio = Новый Структура;	
	
	//Все настройки по подключению к Minio хранятся в справочнике sd_ВнешниеИнформационныеСистемы
	ПараметрыMinio.Вставить("НастройкиMinio", Справочники.sd_ВнешниеИнформационныеСистемы.ПустаяСсылка());
	
	//Здесь у нас сам файл (бинарь), который нужно сохранить или который возвращается при чтении
	ПараметрыMinio.Вставить("ДвоичныеДанные", Неопределено); 
	
	// Cюда передаем путь сформированный подсистемой "Работа с файлами"
	//на основании этого пути будет сформирована вложенность папок в Minio, а также
	//здесь будем хранить ссылку на файл в Minio после сохранения
	ПараметрыMinio.Вставить("ПутьКФайлу", "");  
	
	//Нужно использовать для оптимизации в случае пакетной обработки файлов
	ПараметрыMinio.Вставить("Сессия", Неопределено); 
	
	//Нужно чтобы правильно получить MIME тип 
	ПараметрыMinio.Вставить("Расширение", ""); 
	
	//Нужно чтобы правильно получить MIME тип 
	ПараметрыMinio.Вставить("Приложение", "1cbit");
	
	//По умолчанию Таймаут делаем 30 сек
	ПараметрыMinio.Вставить("Таймаут", 10); 	
	
	Возврат ПараметрыMinio;
КонецФункции


//Процедура cохраняет файл в Minio по переданным параметрам. Основной вызов происходит из подсистемы "РаботаСФайлами",
//но можно использовать самостоятельно заполнив параметры из функции ПараметрыMinio()
Процедура СохранитьФайлВMinio(ПараметрыMinio) Экспорт
	
	ДвоичныеДанные = ПараметрыMinio.ДвоичныеДанные;		
	
	ПутьКФайлу = ПараметрыMinio.ПутьКФайлу;
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу);	
	
	Путь = СтруктураИмениФайла.Путь; 
	ИмяФайла = СтруктураИмениФайла.Имя;	
	ПараметрыMinio.Расширение = СтруктураИмениФайла.Расширение;
	
	//Преобразуем путь в нужный для передачи формат. Часть символов нельзя передать по HTTP, поэтому кодируем все в unicode.
	//Для начала, в пути заменяем символ "\" на ".", так как точка в unicode не меняется (я сделал предположение что в пути не может быть точек).	
	Путь = СтрЗаменить(Путь,"\",".");
	Путь = КодироватьСтроку(Путь, СпособКодированияСтроки.КодировкаURL);
	//Заменяем "." на "/" для корректного формирования URL
	Путь = СтрЗаменить(Путь,".","/"); 
	//Описание зачем плюсуем время в заголовке общего модуля предварительно переводя в unicode	
	ДинамическаяЧастьПути = КодироватьСтроку(Формат(ТекущаяДата(), "ДЛФ=T"), СпособКодированияСтроки.КодировкаURL); 
	Путь = Путь +ДинамическаяЧастьПути+"/";  
	
	//Преобразуем имя файла
	//Если понадобится, то можно и латиницей сделать имя файл
	//ИмяФайла = СтроковыеФункции.СтрокаЛатиницей(СтруктураИмениФайла.Имя);       

	ИмяФайла = КодироватьСтроку(ИмяФайла, СпособКодированияСтроки.КодировкаURL);	
	
	Сессия = ПараметрыMinio.Сессия;
	
	ПараметрыHTTPЗапроса = СформироватьПараметрыHTTPЗапроса(ПараметрыMinio);	
	НастройкиMinio = ПараметрыMinio.НастройкиMinio;	
	АдресСервиса = НастройкиMinio.АдресСервиса;
	ИмяБакета = НастройкиMinio.ИмяБакета;	

	URL = АдресСервиса + ИмяБакета + Путь + ИмяФайла;	
	Ответ = sd_HTTPConnector.Put(URL, ДвоичныеДанные, ПараметрыHTTPЗапроса, Сессия);
	
	Если Ответ.КодСостояния = 200 Тогда
		//Сохраняем путь к файлу. Поэтому пути потом можно будет получить файл из Minio
		ПараметрыMinio.ПутьКФайлу = URL;      
		ТекстСообщения="Файл в MinIO записан корректно";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе 
		ТекстОшибки="При записи файла в MinIO произошла ошибка: "+Ответ.КодСостояния;  			
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;                      
	
КонецПроцедуры


//Процедура получает файл из Minio по переданным параметрам. Основной вызов происходит из подсистемы "РаботаСФайлами",
//но можно использовать самостоятельно заполнив параметры из функции ПараметрыMinio()

Процедура ПолучитьФайлИзMinio(ПараметрыMinio) Экспорт
	
	ПараметрыHTTPЗапроса = СформироватьПараметрыHTTPЗапроса(ПараметрыMinio);	
	Ответ = sd_HTTPConnector.Get(ПараметрыMinio.ПутьКФайлу,, ПараметрыHTTPЗапроса);
	Если Ответ.КодСостояния = 200 Тогда  
		
		ДвоичныеДанныеФайла = Ответ.Тело;
		Если ТипЗнч(ДвоичныеДанныеФайла) <> Тип("ДвоичныеДанные") Тогда
			ТекстОшибки="Полученый файла из MinIO не имеет двоичных данных";  			
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли;
		//Возвращаем двоичные данные
		ПараметрыMinio.ДвоичныеДанные = ДвоичныеДанныеФайла;				

	Иначе 
		ТекстОшибки="При получении файла из minIO произошла ошибка: "+Ответ.КодСостояния;  			
		ВызватьИсключение(ТекстОшибки);
    КонецЕсли;			
	
КонецПроцедуры

 
Процедура УдалитьФайлВMinio(ПараметрыMinio) Экспорт	
	
	ПараметрыHTTPЗапроса = СформироватьПараметрыHTTPЗапроса(ПараметрыMinio);
	Ответ = sd_HTTPConnector.Delete(ПараметрыMinio.ПутьКФайлу,, ПараметрыHTTPЗапроса);
	Если Ответ.КодСостояния = 204 Тогда	
		ТекстСообщения="Файл из MinIO удален успешно";		
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	Иначе 
		ТекстОшибки="При удалении файла из MinIO произошла ошибка: "+Ответ.КодСостояния;  			
		ВызватьИсключение(ТекстОшибки);
    КонецЕсли;		

КонецПроцедуры


#КонецОбласти 


#Область СлужебныеПроцедурыИФункции


Функция ПолучитьПараметрыАутентификацииMinIo(НастройкиMinio)	
	
	ПараметрыАутентификацииMinIo = Новый Структура;
	ПараметрыАутентификацииMinIo.Вставить("Тип", "AWS4-HMAC-SHA256");
	ПараметрыАутентификацииMinIo.Вставить("ИдентификаторКлючаДоступа", НастройкиMinio.Логин);
	ПараметрыАутентификацииMinIo.Вставить("СекретныйКлюч", НастройкиMinio.Пароль);
	ПараметрыАутентификацииMinIo.Вставить("Регион", НастройкиMinio.ИмяСервера);
	ПараметрыАутентификацииMinIo.Вставить("Сервис", "s3");
  	
	Возврат ПараметрыАутентификацииMinIo;
	
КонецФункции 


Функция ПолучитьHTTPЗаголовкиMinIo(ПараметрыMinio)
	
	//Нужно сделать заголовок Content-Type в соответствии с реальным типом файла
	HTTPЗаголовкиMinIo = Новый Соответствие;
	HTTPЗаголовкиMinIo.Вставить("Content-Type", ПолучитьMIMEТипПоРасширению(ПараметрыMinio.Расширение));
	HTTPЗаголовкиMinIo.Вставить("x-amz-meta-author", ПараметрыMinio.Приложение);
	HTTPЗаголовкиMinIo.Вставить("Expect", "100-continue"); 
	
	Возврат HTTPЗаголовкиMinIo;
	
КонецФункции 


Функция СформироватьПараметрыHTTPЗапроса(ПараметрыMinio) Экспорт		
	
	HTTPЗаголовкиMinIo = ПолучитьHTTPЗаголовкиMinIo(ПараметрыMinio);
	
	НастройкиMinio = ПараметрыMinio.НастройкиMinio;	
	ПараметрыАутентификацииMinIo = ПолучитьПараметрыАутентификацииMinIo(НастройкиMinio);	
	
	ПараметрыHTTPЗапроса = Новый Структура;
	ПараметрыHTTPЗапроса.Вставить("Заголовки", HTTPЗаголовкиMinIo);
	ПараметрыHTTPЗапроса.Вставить("Аутентификация", ПараметрыАутентификацииMinIo);
	ПараметрыHTTPЗапроса.Вставить("Таймаут", ПараметрыMinio.Таймаут);
	
	//С этим параметром нужно разобраться
	//ПараметрыHTTPЗапроса.Вставить("МаксимальноеКоличествоПовторов", 8);
	
	Возврат ПараметрыHTTPЗапроса

КонецФункции


//Получаем MIME тип по переданному расширению

//Расширение нужно передавать с точкой, так как функция:
//ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПутьКФайлу) получает данные с точкой
Функция ПолучитьMIMEТипПоРасширению(Расширение)
	Если ПустаяСтрока(Расширение) Тогда 
		MIMEТип = "application/octet-stream";
	Иначе
		СоответствиеMIMEТипов = ПолучитьСоответствиеMIMEТипов();		
		MIMEТип = СоответствиеMIMEТипов.Получить(Расширение);		
		
		Если ПустаяСтрока(MIMEТип) Тогда 
			MIMEТип = "application/octet-stream";
		КонецЕсли;
	КонецЕсли;	
	
	Возврат MIMEТип;	
КонецФункции        

//Формируем таблицу MIME типов                                                         

//Данные для типов взял отсюда:
//https://developer.mozilla.org/ru/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
Функция ПолучитьСоответствиеMIMEТипов()
	                                  
	MIMEТип = Новый Соответствие;
	//Форматы документов
	MIMEТип.Вставить(".doc", "application/msword");
	MIMEТип.Вставить(".docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document");
	MIMEТип.Вставить(".pdf", "application/pdf"); 	
	MIMEТип.Вставить(".ppt", "application/vnd.ms-powerpoint"); 
	MIMEТип.Вставить(".pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"); 	
	MIMEТип.Вставить(".rtf", "application/rtf"); 
	MIMEТип.Вставить(".vsd", "application/vnd.visio"); 	
	MIMEТип.Вставить(".xls", "application/vnd.ms-excel"); 
	MIMEТип.Вставить(".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"); 
    MIMEТип.Вставить(".txt", "text/plain"); 
	
	//Архиваторы
	MIMEТип.Вставить(".rar", "application/vnd.rar");   	
	MIMEТип.Вставить(".zip", "application/zip");       
	
	//Картинки
    MIMEТип.Вставить(".bmp", "image/bmp"); 	
	MIMEТип.Вставить(".gif", "image/gif");
	MIMEТип.Вставить(".jpeg", "image/jpeg"); 
	MIMEТип.Вставить(".jpg", "image/jpeg"); 
	
	//Видео
	MIMEТип.Вставить(".avi", "video/x-msvideo"); 
	MIMEТип.Вставить(".mpeg", "video/mpeg");     
	
	//Аудио
	MIMEТип.Вставить(".mp3", "audio/mpeg"); 
	
	//Разное	
	MIMEТип.Вставить(".css", "text/css"); 		
	MIMEТип.Вставить(".csh", "application/x-csh"); 
	MIMEТип.Вставить(".csv", "text/csv"); 		
	MIMEТип.Вставить(".htm", "text/html"); 
	MIMEТип.Вставить(".html", "text/html"); 
	MIMEТип.Вставить(".ico", "image/vnd.microsoft.icon");
	
	Возврат MIMEТип; 
КонецФункции


#КонецОбласти 

