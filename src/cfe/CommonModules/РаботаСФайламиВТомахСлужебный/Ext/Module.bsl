//++Frog 01.03.2022

#Область ЗаписиДанныхВMinio

//При записи файла проверяем указаны ли в томе настройки MinIO и если есть, то сохраняем.
&Вместо("ЗаписатьДанныеФайлаВТом")
Процедура sd_ЗаписатьДанныеФайлаВТом(ПрисоединенныйФайл, ДвоичныеДанныеИлиПуть)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ШаблонОписанияОшибки = "";
	СтрокаИсключения = "";
	ПутьКТому = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПрисоединенныйФайл.ДополнительныеСвойства, "ПутьКТому", "");
	//++Frog 05.03.2022
	Том = ПрисоединенныйФайл.Том;
	
	СвойстваФайла = СвойстваФайлаВТоме();
	ЗаполнитьЗначенияСвойств(СвойстваФайла, ПрисоединенныйФайл);
	
	ПутьКФайлу = ПолноеИмяФайлаВТоме(СвойстваФайла);
		
	Попытка
		
		УстановитьДопАтрибутыФайла = Ложь;
		Если ТипЗнч(ДвоичныеДанныеИлиПуть) = Тип("Строка") Тогда
			КопироватьФайл(ДвоичныеДанныеИлиПуть, ПутьКФайлу);
			УстановитьДопАтрибутыФайла = Истина;
		Иначе 
			Если Том.sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ЛокальноеХранилище Тогда  
				ДвоичныеДанныеИлиПуть.Записать(ПутьКФайлу);
				УстановитьДопАтрибутыФайла = Истина;
			ИначеЕсли Том.sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ХранилищеS3Minio Тогда
				ПараметрыMinio = MinioS3Connector.ПараметрыMinio();
				
				ПараметрыMinio.НастройкиMinio = Том.sd_ВнешнийИсточникХраненияФайлов;		
				ПараметрыMinio.ДвоичныеДанные = ДвоичныеДанныеИлиПуть;								
				ПараметрыMinio.ПутьКФайлу = ПутьКФайлу;

				//Если при записи произойдет ошибка, то она упадет в исключение ниже.
				MinioS3Connector.СохранитьФайлВMinio(ПараметрыMinio);
				//Если исключения нет, значит все записалось и в переменной ПараметрыMinio.ПутьКФайлу ссылка на записанный файл в Minio
				ПрисоединенныйФайл.ПутьКФайлу = ПараметрыMinio.ПутьКФайлу;
			Иначе 
				ТекстОшибки = НСтр("ru = 'Выбранное в томе значение места хранения файлов не описано в алгоритме'");
				ВызватьИсключение(ТекстОшибки);
			КонецЕсли
		КонецЕсли;
		
		Если УстановитьДопАтрибутыФайла Тогда 
			ФайлНаДиске = Новый Файл(ПутьКФайлу);
			ФайлНаДиске.УстановитьУниверсальноеВремяИзменения(ПрисоединенныйФайл.ДатаМодификацииУниверсальная);
			ФайлНаДиске.УстановитьТолькоЧтение(Истина);
		КонецЕсли
	//--Frog 05.03.2022	
	Исключение
		
		ШаблонОписанияОшибки = НСтр("ru = 'Ошибка при добавлении файла ""%1""
			|в том ""%2"" (%3):
			|""%4"".'");
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Добавление файла'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОписанияОшибки,
				ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение,
				Строка(ПрисоединенныйФайл.Том),
				ПутьКТому,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		
		Если Пользователи.ЭтоПолноправныйПользователь() Тогда
			
			СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонОписанияОшибки,
				ПрисоединенныйФайл.Наименование + "." + ПрисоединенныйФайл.Расширение,
				Строка(ПрисоединенныйФайл.Том),
				ПутьКТому,
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
		Иначе
			
			// Сообщение обычному пользователю.
			СтрокаИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось добавить файл:
				|""%1.%2"".
				|
				|Обратитесь к администратору.'"),
				ПрисоединенныйФайл.Наименование,
				ПрисоединенныйФайл.Расширение);
				
		КонецЕсли;
		
		ВызватьИсключение СтрокаИсключения;
		
	КонецПопытки; 
	
	Если ЗначениеЗаполнено(ПрисоединенныйФайл.Ссылка) Тогда
		РаботаСФайламиСлужебный.УдалитьЗаписьИзРегистраДвоичныеДанныеФайлов(ПрисоединенныйФайл.Ссылка);
	КонецЕсли;
	
КонецПроцедуры  

#КонецОбласти 


#Область ЧтенияДанныхИзMinio      

// Возвращает двоичные данные файла.
&Вместо("ДанныеФайла")
Функция sd_ДанныеФайла(ПрисоединенныйФайл, Знач ВызыватьИсключение = Истина) Экспорт
	
	СвойстваФайла = СвойстваФайлаВТоме(ПрисоединенныйФайл);
	Попытка
		//++Frog 05.03.2022
		//Обрабатываем ситуацию когда файл хранится в Minio
		Том = СвойстваФайла.Том;
		Если Том.sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ЛокальноеХранилище Тогда  
			Возврат Новый ДвоичныеДанные(ПолноеИмяФайлаВТоме(СвойстваФайла));
		ИначеЕсли Том.sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ХранилищеS3Minio Тогда
			ПараметрыMinio = MinioS3Connector.ПараметрыMinio();			
			ПараметрыMinio.НастройкиMinio = Том.sd_ВнешнийИсточникХраненияФайлов;					
			ПараметрыMinio.ПутьКФайлу = СвойстваФайла.ПутьКФайлу;		
			//Если при чтении произойдет ошибка, то она упадет в исключение ниже.
			MinioS3Connector.ПолучитьФайлИзMinio(ПараметрыMinio);
			
			Возврат ПараметрыMinio.ДвоичныеДанные;

		Иначе 
			ТекстОшибки = НСтр("ru = 'Выбранное в томе значение места хранения файлов не описано в алгоритме'");
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли
		//--Frog 05.03.2022
	Исключение
		
		Если Не ВызыватьИсключение Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Файлы.Получение файла из тома'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
			ПрисоединенныйФайл,
			СообщениеОбОшибке);
			
		ПредставлениеВладельцаФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Присоединен к %1 : %2'"),
			Строка(ТипЗнч(СвойстваФайла.ВладелецФайла)),
			СвойстваФайла.ВладелецФайла);
			
		ТекстОшибки = НСтр("ru = 'Не удалось открыть файл:
			|%1
			|который присоединен к:
			|%2
			|по причине: двоичные данные файла были удалены. Возможно, файл очищен как ненужный или удален антивирусной программой.
			|Обратитесь к администратору.'");
		
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки,
			СвойстваФайла.Наименование + "." + СвойстваФайла.Расширение,
			ПредставлениеВладельцаФайла);
			
	КонецПопытки;
	
КонецФункции

#КонецОбласти

#Область УдалениеДанныхИзMinio 

&Вместо("УдалитьФайл")
Функция sd_УдалитьФайл(ПутьКФайлу) Экспорт	
	
	Том = СвободныйТом(1);
	
	Результат = Новый Структура("Успешно, ИнформацияОбОшибке", Истина, Неопределено);
	
	Попытка
		Если Том.sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ЛокальноеХранилище Тогда	
			ФайлНаДиске = Новый Файл(ПутьКФайлу);
			Если ФайлНаДиске.Существует() Тогда
				
				КаталогФайла = ФайлНаДиске.Путь;
				ФайлНаДиске.УстановитьТолькоЧтение(Ложь);				
				
				УдалитьФайлы(ПутьКФайлу);
				
				// Удаляем каталог файла, если после удаления файла каталог стал пустым.
				ФайлыВКаталоге = НайтиФайлы(КаталогФайла, ПолучитьМаскуВсеФайлы());
				Если ФайлыВКаталоге.Количество() = 0 Тогда
					УдалитьФайлы(КаталогФайла);
				КонецЕсли;					
				
			КонецЕсли; 
		ИначеЕсли Том.sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ХранилищеS3Minio Тогда	
			ПараметрыMinio = MinioS3Connector.ПараметрыMinio();			
			ПараметрыMinio.НастройкиMinio = Том.sd_ВнешнийИсточникХраненияФайлов;
			ПараметрыMinio.ПутьКФайлу = ПутьКФайлу;		
			//Если при чтении произойдет ошибка, то она упадет в исключение ниже.
			MinioS3Connector.УдалитьФайлВMinio(ПараметрыMinio);	
		Иначе 
			ТекстОшибки = НСтр("ru = 'Выбранное в томе значение места хранения файлов не описано в алгоритме'");
			ВызватьИсключение(ТекстОшибки);
		КонецЕсли 
		
	Исключение
	
		Результат.Успешно = Ложь;
		Ошибка= ИнформацияОбОшибке();
		Результат.ИнформацияОбОшибке = КраткоеПредставлениеОшибки(Ошибка);
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Удаление файлов в томе'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(Ошибка));
		
	КонецПопытки;

		
	Возврат Результат;
КонецФункции

#КонецОбласти


#Область ВспомогательныхФункцийПроцедур

//Переопределяем путь к файлу "ПутьКФайлу" в случае хранения файлов в Minio, нужно для того чтобы в процессе
//перетаскивания файлов не вываливалась ошибка при создании файла версий. При этому нужно учитывать что эта функция вызывается повсеместно и переопределять
//её нужно только если это ссылка в Minio
&Вместо("ПолноеИмяФайлаВТоме")
Функция sd_ПолноеИмяФайлаВТоме(СвойстваФайла, ДатаДляРазмещенияВТоме = Неопределено) Экспорт
	
	Разделитель = ПолучитьРазделительПути();
	
	Если НЕ ЗначениеЗаполнено(СвойстваФайла.Том) Тогда
		Возврат "";
	КонецЕсли;
	
	//++Frog 05.03.2022
	Том	= СвойстваФайла.Том;
	
	КорневойКаталог = ПолныйПутьТома(Том);            
	//Проверяем что в переменной СвойстваФайла.ПутьКФайлу есть значение 
	Если ПустаяСтрока(СвойстваФайла.ПутьКФайлу) = Ложь Тогда
		Если Том.sd_МестоХраненияФайлов = Перечисления.sd_МестоХраненияФайлов.ХранилищеS3Minio Тогда
			//Проверяем, что переменная СвойстваФайла.ПутьКФайлу содержит ссылку в Minio, а также что заполнено поле СвойстваФайла.НомерВерсии
			//НомерВерсии заполнен, то значит идет удаление существующего файла и изменять путь нельзя
			Если (СтрНайти(СвойстваФайла.ПутьКФайлу,Том.sd_ВнешнийИсточникХраненияФайлов.АдресСервиса) > 0)
				И (ЗначениеЗаполнено(СвойстваФайла.НомерВерсии) = Ложь) Тогда
				ПараметрыMinio = MinioS3Connector.ПараметрыMinio();			
				ПараметрыMinio.НастройкиMinio = Том.sd_ВнешнийИсточникХраненияФайлов;					
				ПараметрыMinio.ПутьКФайлу = СвойстваФайла.ПутьКФайлу;		
				//Если при чтении произойдет ошибка, то она упадет в исключение ниже.
				MinioS3Connector.ПолучитьФайлИзMinio(ПараметрыMinio);
				
				//Записываем временный файл, чтобы при операции drag and drop алгоритм отработал штатно
				//ИмяВременногоФайла = ПолучитьИмяВременногоФайла(СвойстваФайла.Расширение);
				ИмяВременногоФайла = КаталогВременныхФайлов()+СвойстваФайла.Наименование+"."+СвойстваФайла.Расширение;
				ДвоичныеДанныеФайла = ПараметрыMinio.ДвоичныеДанные;				
				ДвоичныеДанныеФайла.Записать(ИмяВременногоФайла);    
				
				Возврат ИмяВременногоФайла;
			КонецЕсли;
		КонецЕсли;
		
		Возврат КорневойКаталог + СвойстваФайла.ПутьКФайлу;
		
	КонецЕсли;	
	
	КорневойКаталог = КорневойКаталог + ?(Прав(КорневойКаталог, 1) = Разделитель, "", Разделитель);
	Если СоздаватьПодкаталогиСИменамиВладельцев() Тогда
		//Добавляем условие на Владельца файла. Владельца может не быть в случае и тогда падает ошибка
		Если ЗначениеЗаполнено(СвойстваФайла.ВладелецФайла) Тогда 
			КорневойКаталог = КорневойКаталог + ИмяКаталогаВладельцаФайла(СвойстваФайла.ВладелецФайла) + Разделитель;
		КонецЕсли;
	КонецЕсли;
	//--Frog 05.03.2022
	
	ДатаРазмещения = ?(ЗначениеЗаполнено(ДатаДляРазмещенияВТоме), ДатаДляРазмещенияВТоме, ТекущаяДатаСеанса());
	КорневойКаталог = КорневойКаталог + Формат(ДатаРазмещения, "ДФ=ггггММдд") + Разделитель;
	
	ИмяФайла = СвойстваФайла.Наименование
		+ ?(ЗначениеЗаполнено(СвойстваФайла.НомерВерсии), "." + СвойстваФайла.НомерВерсии, "")
		+ ?(СтрНайти(СвойстваФайла.Расширение, ".") > 0, СвойстваФайла.Расширение, "." + СвойстваФайла.Расширение);
	
	Возврат КорневойКаталог
		+ РаботаСФайламиСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(КорневойКаталог, ИмяФайла);
	
КонецФункции
	
#КонецОбласти 

//++Frog 10.03.2022